//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceTester.HeresyAuthService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HeresyAuthService.IHeresyAuthService")]
    public interface IHeresyAuthService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHeresyAuthService/Register", ReplyAction="http://tempuri.org/IHeresyAuthService/RegisterResponse")]
        bool Register(string loginHash, string passHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHeresyAuthService/Register", ReplyAction="http://tempuri.org/IHeresyAuthService/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(string loginHash, string passHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHeresyAuthService/Login", ReplyAction="http://tempuri.org/IHeresyAuthService/LoginResponse")]
        string Login(string loginHash, string passHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHeresyAuthService/Login", ReplyAction="http://tempuri.org/IHeresyAuthService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string loginHash, string passHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHeresyAuthService/Logout", ReplyAction="http://tempuri.org/IHeresyAuthService/LogoutResponse")]
        string Logout(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHeresyAuthService/Logout", ReplyAction="http://tempuri.org/IHeresyAuthService/LogoutResponse")]
        System.Threading.Tasks.Task<string> LogoutAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHeresyAuthService/IsLogged", ReplyAction="http://tempuri.org/IHeresyAuthService/IsLoggedResponse")]
        bool IsLogged(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHeresyAuthService/IsLogged", ReplyAction="http://tempuri.org/IHeresyAuthService/IsLoggedResponse")]
        System.Threading.Tasks.Task<bool> IsLoggedAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHeresyAuthServiceChannel : ServiceTester.HeresyAuthService.IHeresyAuthService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HeresyAuthServiceClient : System.ServiceModel.ClientBase<ServiceTester.HeresyAuthService.IHeresyAuthService>, ServiceTester.HeresyAuthService.IHeresyAuthService {
        
        public HeresyAuthServiceClient() {
        }
        
        public HeresyAuthServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HeresyAuthServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HeresyAuthServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HeresyAuthServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Register(string loginHash, string passHash) {
            return base.Channel.Register(loginHash, passHash);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(string loginHash, string passHash) {
            return base.Channel.RegisterAsync(loginHash, passHash);
        }
        
        public string Login(string loginHash, string passHash) {
            return base.Channel.Login(loginHash, passHash);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string loginHash, string passHash) {
            return base.Channel.LoginAsync(loginHash, passHash);
        }
        
        public string Logout(string token) {
            return base.Channel.Logout(token);
        }
        
        public System.Threading.Tasks.Task<string> LogoutAsync(string token) {
            return base.Channel.LogoutAsync(token);
        }
        
        public bool IsLogged(string token) {
            return base.Channel.IsLogged(token);
        }
        
        public System.Threading.Tasks.Task<bool> IsLoggedAsync(string token) {
            return base.Channel.IsLoggedAsync(token);
        }
    }
}
